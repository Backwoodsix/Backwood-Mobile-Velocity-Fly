-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Player setup
local LocalPlayer = Players.LocalPlayer
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local hum = character:WaitForChild("Humanoid")

-- Force PrimaryPart
if not character.PrimaryPart then
    character.PrimaryPart = hrp
end

-- Step 1: Teleport to TeslaLab
local targetCFrame = Workspace.TeslaLab.Generator.Generator.CFrame
for i = 1, 2 do
    hrp.CFrame = targetCFrame
    wait(1.1)
end

-- Utility: is model unanchored
local function isUnanchored(model)
    for _, p in pairs(model:GetDescendants()) do
        if p:IsA("BasePart") and not p.Anchored then
            return true
        end
    end
    return false
end

-- Find nearest valid chair near Tesla
local function findNearestValidChair()
    local runtimeFolder = Workspace:FindFirstChild("RuntimeItems")
    if not runtimeFolder then return nil end

    local origin = targetCFrame.Position
    local closest, shortest = nil, math.huge

    for _, item in pairs(runtimeFolder:GetChildren()) do
        if item:IsA("Model") and item.Name == "Chair" and isUnanchored(item) then
            local seat = item:FindFirstChildWhichIsA("Seat", true)
            if seat and not seat.Occupant then
                local dist = (origin - seat.Position).Magnitude
                if dist <= 300 and dist < shortest then
                    closest = seat
                    shortest = dist
                end
            end
        end
    end
    return closest
end

-- Disable collisions
local function disableCollisionsRecursive(obj)
    for _, part in pairs(obj:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
end

-- Enable chair-based flying
local flySpeed = 200
local function enableFlying()
    local camera = workspace.CurrentCamera
    local controlModule = require(LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
    local bv = Instance.new("BodyVelocity")
    bv.Name = "VelocityHandler"
    bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    bv.Velocity = Vector3.new()
    bv.Parent = hrp

    local bg = Instance.new("BodyGyro")
    bg.Name = "GyroHandler"
    bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    bg.P = 1000
    bg.D = 50
    bg.Parent = hrp

    RunService.RenderStepped:Connect(function()
        local dir = controlModule:GetMoveVector()
        bv.Velocity = (camera.CFrame.RightVector * dir.X + -camera.CFrame.LookVector * dir.Z) * flySpeed
        bg.CFrame = camera.CFrame
    end)
end

-- Step 2–3: Sit, weld, disable collisions, fly up 5 studs
local function sitAndPrepare(seat)
    hrp.CFrame = seat.CFrame * CFrame.new(0, 2, 0)
    wait(0.2)
    seat:Sit(hum)

    for i = 1, 30 do
        if hum.SeatPart == seat then break end
        wait(0.1)
    end

    local weld = Instance.new("WeldConstraint")
    weld.Part0 = hrp
    weld.Part1 = seat
    weld.Parent = seat

    disableCollisionsRecursive(character)
    disableCollisionsRecursive(seat.Parent)

    enableFlying()

    -- Fly upward 5 studs to prevent desync
    seat.Parent:PivotTo(seat.Parent:GetPivot() + Vector3.new(0, 5, 0))
    task.wait(0.5)
end

-- Step 4–6: Collect all bonds by teleporting seat model to each
local function collectAllBondsWithChair(seatModel)
    local activateRemote = ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Network")
        :WaitForChild("RemotePromise"):WaitForChild("Remotes"):WaitForChild("C_ActivateObject")

    local function getAllBonds()
        local bonds = {}
        for _, item in ipairs(workspace.RuntimeItems:GetChildren()) do
            if item:IsA("Model") and item.Name:lower() == "bond" then
                local part = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                if part then
                    table.insert(bonds, {model = item, pos = part.Position})
                end
            end
        end
        return bonds
    end

    local function teleportTo(pos)
        seatModel:PivotTo(CFrame.new(pos + Vector3.new(0, 5, 0)))
    end

    local bonds = getAllBonds()
    for _, bond in ipairs(bonds) do
        teleportTo(bond.pos)
        local startTime = os.clock()
        while bond.model.Parent and os.clock() - startTime < 1.5 do
            activateRemote:FireServer(bond.model)
            task.wait(0.03)
        end
    end
end

-- Run main logic
task.spawn(function()
    local seat
    repeat
        seat = findNearestValidChair()
        wait(0.25)
    until seat

    local chairModel = seat:FindFirstAncestorOfClass("Model")
    if not chairModel then return end

    sitAndPrepare(seat)
    collectAllBondsWithChair(chairModel)
end)
